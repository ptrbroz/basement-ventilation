[
    {
        "id": "057425926446ff2a",
        "type": "tab",
        "label": "database test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f0f450cae18bb60c",
        "type": "tab",
        "label": "CHMU grabber",
        "disabled": false,
        "info": "\r\nFlow that periodically downloads weather\r\ndata provided by CHMU (https://opendata.chmi.cz)\r\nand writes them to database for comparision\r\nwith data measured by device.\r\n\r\n",
        "env": []
    },
    {
        "id": "e7d5c2eda574523c",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "braeburn",
        "hostFieldType": "str",
        "port": 5432,
        "portFieldType": "num",
        "database": "${DB_NAME}",
        "databaseFieldType": "str",
        "ssl": "true",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": 10,
        "maxFieldType": "num",
        "idle": 1000,
        "idleFieldType": "num",
        "connectionTimeout": 10000,
        "connectionTimeoutFieldType": "num",
        "user": "${DB_USER}",
        "userFieldType": "env",
        "password": "${DB_PASSWORD}",
        "passwordFieldType": "str"
    },
    {
        "id": "1ed92a3290c33330",
        "type": "postgresql",
        "z": "057425926446ff2a",
        "name": "",
        "query": "INSERT INTO weather (\n    time_device,\n    dtime_server_ms,\n    temp_in,\n    temp_out,\n    rhum_in,\n    rhum_out,\n    ahum_in,\n    ahum_out,\n    fan_state\n) VALUES (\n    $1,$2,$3,$4,$5,$6,$7,$8,$9\n)",
        "postgreSQLConfig": "e7d5c2eda574523c",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "40009febfc348ddc"
            ]
        ]
    },
    {
        "id": "05e6202016bbcc31",
        "type": "inject",
        "z": "057425926446ff2a",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "50ec811df1d76369"
            ]
        ]
    },
    {
        "id": "50ec811df1d76369",
        "type": "function",
        "z": "057425926446ff2a",
        "name": "function 1",
        "func": "// Helper functions\nfunction randInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// --- Sine wave helper ---\nfunction sineWave(t, periodMs, min, max) {\n    // t = current time in ms\n    // periodMs = period of the sine wave in ms\n    // min, max = output range\n    let phase = (t % periodMs) / periodMs;  // 0..1\n    let angle = phase * 2 * Math.PI;        // 0..2π\n    let normalized = (Math.sin(angle) + 1) / 2; // 0..1\n    return Math.round(min + normalized * (max - min));\n}\n\nlet now = Date.now();\nlet periodMs = 3600 * 1000;  // 1 hour in ms\n\n// Temperatures in range 0–4500 (i.e., 0.00–45.00 °C)\nlet temp_in = sineWave(now, periodMs, 0, 4500);\nlet temp_out = sineWave(now + periodMs/4, periodMs, 0, 4500); \n// offset by 15 mins for variety\n\n// Generate relative humidity (%) scaled *100\nlet rhum_in = randInt(2000, 9000);  // 20% - 90%\nlet rhum_out = randInt(2000, 9000);\n\n// Calculate absolute humidity (approx) in g/m³ *100\n// Formula: AH = 6.112 * e^(17.67*T/(T+243.5)) * RH * 2.1674 / (273.15 + T)\nfunction calcAH(tempC, rhumPercent) {\n    let T = tempC / 100;\n    let RH = rhumPercent / 100;\n    let AH = 6.112 * Math.exp(17.67 * T / (T + 243.5)) * RH * 2.1674 / (273.15 + T);\n    return Math.round(AH * 100);  // scale *100\n}\n\nlet ahum_in = calcAH(temp_in, rhum_in);\nlet ahum_out = calcAH(temp_out, rhum_out);\n\n// Server timestamp\nlet dtime_server_ms = randInt(-1, 2500);\n\nmsg.params = [\n    new Date().toISOString(),  //time device\n    dtime_server_ms,\n    temp_in,\n    temp_out,\n    rhum_in,\n    rhum_out,\n    ahum_in,\n    ahum_out,\n    randInt(0, 1)  // fan state\n]\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "1ed92a3290c33330",
                "40009febfc348ddc"
            ]
        ]
    },
    {
        "id": "40009febfc348ddc",
        "type": "debug",
        "z": "057425926446ff2a",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "6d04a76eba869767",
        "type": "function",
        "z": "f0f450cae18bb60c",
        "name": "prep_address",
        "func": "// in : N/A\n// out : address whence weather data json is to be downloaded from\n\nlet WSI = \"0-203-0-11514\"; //Klementinum\n\nlet now = new Date(Date.now()); //returns system time\n\nlet year = now.getFullYear();\nlet month = String(now.getMonth() + 1).padStart(2, \"0\");\nlet day = String(now.getDate()).padStart(2, \"0\");\n\nlet dateString = `${year}${month}${day}`\n\nlet preAddr = \"https://opendata.chmi.cz/meteorology/climate/now/data/10m-\"; //10-min interval data\n\nlet addr = `${preAddr}${WSI}-${dateString}.json`\n\nmsg.url = addr;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "cca9d112972c76fa"
            ]
        ]
    },
    {
        "id": "7196b10592855860",
        "type": "inject",
        "z": "f0f450cae18bb60c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "object",
        "payloadType": "date",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "6d04a76eba869767"
            ]
        ]
    },
    {
        "id": "a23313dc8fa70e0e",
        "type": "debug",
        "z": "f0f450cae18bb60c",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 60,
        "wires": []
    },
    {
        "id": "cca9d112972c76fa",
        "type": "http request",
        "z": "f0f450cae18bb60c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 240,
        "wires": [
            [
                "6385bd828fdd7172"
            ]
        ]
    },
    {
        "id": "8e6aaca91a57f911",
        "type": "function",
        "z": "f0f450cae18bb60c",
        "name": "extract_relevant",
        "func": "/* \ndata from CHMU in following order structure:\n0 = STATION -- disregard (const due to data source)\n1 = ELEMENT -- useful. T for temperature [°C], H for rel humidity [%]\n2 = DT      -- useful. time of measurement\n3 = VAL     -- useful. data\n4 = FLAG    -- disregard (not used by temp or humidity measurements)\n5 = QUALITY -- disregard (data quality, seems to be constantly set to UNKNOWN (=5.0))\n*/\n\nlet data = msg.data.data.data; //yea, the CHMU JSON actually looks like that\n\n//todo payload handle\n\n//prep arrays\n\nmsg.tempArray = Array.from({ length: 150 }, () => [null, null]);\nmsg.rhumArray = Array.from({ length: 150 }, () => [null, null]);\nmsg.ahumArray = Array.from({ length: 150 }, () => [null, null]);\n\n\nlet tempIndex = 0;\nlet humIndex = 0;\n\nfor (let i = 0; i < data.length; i++) {\n    const row = data[i];\n    \n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6385bd828fdd7172",
        "type": "function",
        "z": "f0f450cae18bb60c",
        "name": "rename",
        "func": "msg.data = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "8e6aaca91a57f911"
            ]
        ]
    }
]
